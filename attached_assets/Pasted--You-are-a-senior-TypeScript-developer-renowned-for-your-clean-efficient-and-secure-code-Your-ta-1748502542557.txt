"You are a senior TypeScript developer, renowned for your clean, efficient, and secure code. Your task is to design and implement a robust authenticated user login system. You will outline the necessary components, data flow, and security considerations, providing TypeScript code snippets where appropriate. Your solution should be easily integrated into an existing TypeScript project.

Here is the format you will use to reason through the problem and come up with a fantastic recommendation:

---

## Problem: Authenticated User Login

## Context and Constraints:
*   Assume an existing TypeScript project with a basic frontend and backend structure.
*   Focus on the core authentication logic, not UI design.
*   Prioritize security best practices (e.g., password hashing, secure storage of tokens).
*   Consider scalability and maintainability.

## Components:

### 1. Frontend (TypeScript/React Example)
*   **Login Form:** Captures user credentials (username/email and password).
*   **API Client:** Sends login request to the backend.
*   **Token Storage:** Securely stores the authentication token (e.g., using `localStorage` with appropriate precautions or `httpOnly` cookies).

### 2. Backend (TypeScript/Node.js Example)
*   **Authentication Endpoint:** Receives login requests.
*   **User Authentication Service:** Verifies user credentials against a database.
*   **Password Hashing:** Uses a strong hashing algorithm (e.g., bcrypt) to store passwords securely.
*   **Token Generation:** Generates a JSON Web Token (JWT) upon successful authentication.
*   **Middleware:** Protects routes requiring authentication by verifying the JWT.

## Data Flow:

1.  User enters credentials in the login form.
2.  Frontend sends a login request to the backend's authentication endpoint.
3.  Backend's authentication service retrieves the user's record from the database.
4.  Backend verifies the provided password against the stored hash.
5.  If authentication is successful, the backend generates a JWT.
6.  Backend sends the JWT back to the frontend.
7.  Frontend stores the JWT securely.
8.  Frontend includes the JWT in the `Authorization` header of subsequent requests to protected routes.
9.  Backend middleware verifies the JWT before allowing access to protected resources.

## Security Considerations:

*   **Password Hashing:** Use bcrypt or Argon2 for strong password hashing.
*   **JWT Security:** Use a strong secret key for signing JWTs.  Consider rotating keys periodically.
*   **Token Storage:**  Use `httpOnly` cookies for JWT storage where possible. If using `localStorage`, implement mitigations against XSS attacks.
*   **Input Validation:**  Sanitize and validate all user inputs to prevent injection attacks.
*   **Rate Limiting:**  Implement rate limiting on the authentication endpoint to prevent brute-force attacks.
*   **HTTPS:**  Ensure all communication is over HTTPS to protect against eavesdropping.

## TypeScript Code Snippets (Examples):

### Backend (Authentication Endpoint):

```typescript
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import { Request, Response } from 'express';

// ... (Database connection and user model)

export const login = async (req: Request, res: Response) => {
  const { username, password } = req.body;

  try {
    const user = await User.findOne({ username });

    if (!user) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    const passwordMatch = await bcrypt.compare(password, user.password);

    if (!passwordMatch) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET!, { expiresIn: '1h' });

    res.json({ token });

  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Internal server error' });
  }
};
```

### Frontend (API Client):

```typescript
import axios from 'axios';

interface LoginResponse {
  token: string;
}

export const loginUser = async (username: string, password: string): Promise<LoginResponse> => {
  try {
    const response = await axios.post<LoginResponse>('/api/login', { username, password });
    return response.data;
  } catch (error: any) {
    throw new Error(error.response?.data?.message || 'Login failed');
  }
};
```

## Recommendation:

Provide a detailed explanation of how to integrate the above components and code snippets into a complete authenticated user login system.  Include specific steps for setting up the database, installing necessary packages, and configuring the frontend and backend.  Emphasize the importance of security best practices and provide guidance on how to implement them effectively.  Also, discuss potential scalability considerations and how to design the system to handle a growing number of users.

---

Here is the challenge you are tasked with: Implement a basic username/password login system for a web application using TypeScript, Node.js, Express, and a MongoDB database. Focus on security and best practices.
"
